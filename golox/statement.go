/* This file is autogenerated, DO NOT MODIFY */
package main

type Statement interface {
	AcceptAny(visitor StatementVisitor[any]) (any, error)
}

type ExpressionStatement struct {
	Expression Expression
}

func (e *ExpressionStatement) AcceptAny(visitor StatementVisitor[any]) (any, error) {
	return visitor.VisitExpressionStatement(e)
}

type PrintStatement struct {
	Expression Expression
}

func (e *PrintStatement) AcceptAny(visitor StatementVisitor[any]) (any, error) {
	return visitor.VisitPrintStatement(e)
}

type StatementVisitorConstraint interface {
	any
}

type StatementVisitor[T StatementVisitorConstraint] interface {
	VisitExpressionStatement(statement *ExpressionStatement) (T, error)
	VisitPrintStatement(statement *PrintStatement) (T, error)
}
