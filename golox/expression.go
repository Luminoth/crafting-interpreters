/* This file is autogenerated, DO NOT MODIFY */
package main

type Expression interface {
	AcceptString(visitor ExpressionVisitor[string]) (string, error)
	AcceptValue(visitor ExpressionVisitor[Value]) (Value, error)
}

type BinaryExpression struct {
	Left     Expression
	Operator *Token
	Right    Expression
}

func (e *BinaryExpression) AcceptString(visitor ExpressionVisitor[string]) (string, error) {
	return visitor.VisitBinaryExpression(e)
}

func (e *BinaryExpression) AcceptValue(visitor ExpressionVisitor[Value]) (Value, error) {
	return visitor.VisitBinaryExpression(e)
}

type TernaryExpression struct {
	Condition Expression
	True      Expression
	False     Expression
}

func (e *TernaryExpression) AcceptString(visitor ExpressionVisitor[string]) (string, error) {
	return visitor.VisitTernaryExpression(e)
}

func (e *TernaryExpression) AcceptValue(visitor ExpressionVisitor[Value]) (Value, error) {
	return visitor.VisitTernaryExpression(e)
}

type UnaryExpression struct {
	Operator *Token
	Right    Expression
}

func (e *UnaryExpression) AcceptString(visitor ExpressionVisitor[string]) (string, error) {
	return visitor.VisitUnaryExpression(e)
}

func (e *UnaryExpression) AcceptValue(visitor ExpressionVisitor[Value]) (Value, error) {
	return visitor.VisitUnaryExpression(e)
}

type GroupingExpression struct {
	Expression Expression
}

func (e *GroupingExpression) AcceptString(visitor ExpressionVisitor[string]) (string, error) {
	return visitor.VisitGroupingExpression(e)
}

func (e *GroupingExpression) AcceptValue(visitor ExpressionVisitor[Value]) (Value, error) {
	return visitor.VisitGroupingExpression(e)
}

type LiteralExpression struct {
	Value LiteralValue
}

func (e *LiteralExpression) AcceptString(visitor ExpressionVisitor[string]) (string, error) {
	return visitor.VisitLiteralExpression(e)
}

func (e *LiteralExpression) AcceptValue(visitor ExpressionVisitor[Value]) (Value, error) {
	return visitor.VisitLiteralExpression(e)
}

type ExpressionVisitorConstraint interface {
	string | Value
}

type ExpressionVisitor[T ExpressionVisitorConstraint] interface {
	VisitBinaryExpression(expression *BinaryExpression) (T, error)
	VisitTernaryExpression(expression *TernaryExpression) (T, error)
	VisitUnaryExpression(expression *UnaryExpression) (T, error)
	VisitGroupingExpression(expression *GroupingExpression) (T, error)
	VisitLiteralExpression(expression *LiteralExpression) (T, error)
}
