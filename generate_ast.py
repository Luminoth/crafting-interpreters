#!/usr/bin/env python3

import argparse
import io
import os
import sys
from typing import Dict, List


class LanguageConfig:
    def __init__(self, output_dir: str, extension: str, format_cmd: str):
        self.output_dir = output_dir
        self.extension = extension
        self.format_cmd = format_cmd

        self.expression_output_file_path = os.path.join(
            self.output_dir, f'expression.{self.extension}')

        self.statement_output_file_path = os.path.join(
            self.output_dir, f'statement.{self.extension}')


SUPPORTED_LANGUAGES = {
    'go': LanguageConfig(os.path.join('golox'), 'go', 'gofmt -w'),
}


class ExpressionDef:
    def __init__(self, name: str, fields: Dict[str, str]):
        self.name = name
        self.fields = fields


EXPRESSIONS = [
    ExpressionDef('Binary', {
        'left': 'Expression',
        'operator': 'Token',
        'right': 'Expression',
    }),
    ExpressionDef('Ternary', {
        'condition': 'Expression',
        'true': 'Expression',
        'false': 'Expression',
    }),
    ExpressionDef('Unary', {
        'operator': 'Token',
        'right': 'Expression',
    }),
    ExpressionDef('Grouping', {
        'expression': 'Expression',
    }),
    ExpressionDef('Literal', {
        'value': 'Object',
    }),
]


class StatementDef:
    def __init__(self, name: str, fields: Dict[str, str]):
        self.name = name
        self.fields = fields


STATEMENTS = [
    StatementDef('Expression', {
        'expression': 'Expression',
    }),
    StatementDef('Print', {
        'expression': 'Expression',
    }),
]


def generate_go_visitors(type: str, defs: List[ExpressionDef | StatementDef], f: io.TextIOWrapper):
    # visitor type constraint
    f.write(f"""
type {type}VisitorConstraint interface {{
    string | Value
}}
""")

    # visitor interface
    f.write('\n')
    f.write(f'type {type}Visitor[T {type}VisitorConstraint] interface {{\n')
    for d in defs:
        f.write(
            f'Visit{d.name}{type}({type.lower()} *{d.name}{type}) (T, error)\n')
    f.write('}\n')


def generate_go_definition(type: str, d: ExpressionDef | StatementDef, f: io.TextIOWrapper):
    # type
    f.write('\n')
    f.write(f'type {d.name}{type} struct {{\n')
    for name, t in d.fields.items():
        # do some type overriding
        match t:
            case 'Object':
                t = 'LiteralValue'
            case 'Token':
                t = '*Token'
        f.write(f'{name.capitalize()} {t}\n')
    f.write('}\n')

    # visitor interface
    f.write(
        f'func (e *{d.name}{type}) AcceptString(visitor {type}Visitor[string]) (string, error) {{\n')
    f.write(f'return visitor.Visit{d.name}{type}(e)\n')
    f.write('}\n')
    f.write('\n')
    f.write(
        f'func (e *{d.name}{type}) AcceptValue(visitor {type}Visitor[Value]) (Value, error) {{\n')
    f.write(f'return visitor.Visit{d.name}{type}(e)\n')
    f.write('}\n')


def generate_go_definitions(type: str, file_path: str, defs: List[ExpressionDef | StatementDef]):
    print(f'Generating Go {type}s to "{file_path}" ...')

    with open(file_path, 'w', encoding='utf-8') as f:
        # header
        f.write('/* This file is autogenerated, DO NOT MODIFY */\n')
        f.write('package main\n')

        # interface
        f.write(f"""
type {type} interface {{
    AcceptString(visitor {type}Visitor[string]) (string, error)
    AcceptValue(visitor {type}Visitor[Value]) (Value, error)
}}
""")

        # definitions
        for d in defs:
            generate_go_definition(type, d, f)

        # visitors
        generate_go_visitors(type, defs, f)

    # format the file
    format_cmd = f'{SUPPORTED_LANGUAGES["go"].format_cmd} {file_path}'
    print(f'Formatting output "{format_cmd}" ...')
    os.system(format_cmd)


def generate_go():
    generate_go_definitions(
        "Expression", SUPPORTED_LANGUAGES['go'].expression_output_file_path, EXPRESSIONS)
    generate_go_definitions(
        "Statement", SUPPORTED_LANGUAGES['go'].statement_output_file_path, STATEMENTS)


def generate(languages: List[str]):
    if 'go' in languages:
        generate_go()


def main(args: argparse.Namespace):
    match args.command:
        case 'generate':
            generate(args.languages)
        case _:
            print(f'Unsupported command: {args.command}')
            sys.exit(1)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='AST codegen')

    subparsers = parser.add_subparsers(dest='command', help='sub-command help', required=True)

    subparser = subparsers.add_parser('generate')
    subparser.add_argument('--languages', choices=SUPPORTED_LANGUAGES.keys(), default=SUPPORTED_LANGUAGES.keys(),
                           help='Which languages to generate for')

    args = parser.parse_args()

    main(args)
